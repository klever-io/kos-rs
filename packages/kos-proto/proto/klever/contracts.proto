syntax = "proto3";

package proto;

option go_package = "./;transaction";

// TXContract available
message TransferContract {
	bytes ToAddress    = 1 [json_name = "ToAddress"];
	bytes AssetID      = 2 [json_name = "AssetID"];
	int64 Amount       = 3 [json_name = "Amount"];
	int64 KDARoyalties = 4 [json_name = "KDARoyalties"];
}

// CreateAssetContract holds the data for a Klever digital asset
message CreateAssetContract {
    enum EnumAssetType {
        Fungible    = 0;
        NonFungible = 1;
    }
    EnumAssetType        Type                      = 1  [json_name = "Type"];
    bytes                Name                      = 2  [json_name = "Name"];
    bytes                Ticker                    = 3  [json_name = "Ticker"];
    bytes                OwnerAddress              = 4  [json_name = "OwnerAddress"];
    string               Logo                      = 5  [json_name = "Logo"];
    map<string, string>  URIs                      = 6  [json_name = "URIs"];
    uint32               Precision                 = 7  [json_name = "Precision"];
    int64                InitialSupply             = 8  [json_name = "InitialSupply"];
    int64                MaxSupply                 = 9  [json_name = "MaxSupply"];
    RoyaltiesInfo        Royalties                 = 10 [json_name = "Royalties"];
    PropertiesInfo       Properties                = 11 [json_name = "Properties"];
    AttributesInfo       Attributes                = 12 [json_name = "Attributes"];
    StakingInfo          Staking                   = 13 [json_name = "Staking"];
    repeated RolesInfo   Roles                     = 14 [json_name = "Roles"];
}

// PropertiesInfo hold the properties structure for the KDA asset
message PropertiesInfo {
    bool CanFreeze                = 1 [json_name = "CanFreeze"];
    bool CanWipe                  = 2 [json_name = "CanWipe"];
    bool CanPause                 = 3 [json_name = "CanPause"];
    bool CanMint                  = 4 [json_name = "CanMint"];
    bool CanBurn                  = 5 [json_name = "CanBurn"];
    bool CanChangeOwner           = 6 [json_name = "CanChangeOwner"];
    bool CanAddRoles              = 7 [json_name = "CanAddRoles"];
}

// AttributesInfo hold the attributes structure for the KDA asset
message AttributesInfo {
    bool IsPaused                      = 1 [json_name = "IsPaused"];
    bool IsNFTMintStopped              = 2 [json_name = "IsNFTMintStopped"];
    bool IsRoyaltiesChangeStopped      = 3 [json_name = "IsRoyaltiesChangeStopped"];
    bool IsNFTMetadataChangeStopped    = 4 [json_name = "IsNFTMetadataChangeStopped"];
}

// StakingInfo hold the staking structure for the KDA asset
message StakingInfo {
    enum InterestType {	
        APRI = 0;	
        FPRI = 1;	
    }
    InterestType Type                         = 1 [json_name = "Type"];
    uint32       APR                          = 2 [json_name = "APR"];
    uint32       MinEpochsToClaim             = 3 [json_name = "MinEpochsToClaim"];
    uint32       MinEpochsToUnstake           = 4 [json_name = "MinEpochsToUnstake"];
    uint32       MinEpochsToWithdraw          = 5 [json_name = "MinEpochsToWithdraw"];
}

// RolesInfo holds the roles for a given asset and the given address
message RolesInfo {
    bytes Address               = 1 [json_name = "Address"];
    bool  HasRoleMint           = 2 [json_name = "HasRoleMint"];
    bool  HasRoleSetITOPrices   = 3 [json_name = "HasRoleSetITOPrices"];
    bool  HasRoleDeposit        = 4 [json_name = "HasRoleDeposit"];
}

// RoyaltiesInfo holds the royalties for a given asset
message RoyaltiesInfo {
    bytes                          Address            = 1 [json_name = "Address"];
    repeated RoyaltyInfo           TransferPercentage = 2 [json_name = "TransferPercentage"];
    int64                          TransferFixed      = 3 [json_name = "TransferFixed"];
    uint32                         MarketPercentage   = 4 [json_name = "MarketPercentage"];
    int64                          MarketFixed        = 5 [json_name = "MarketFixed"];
    map<string, RoyaltySplitInfo>  SplitRoyalties     = 6 [json_name = "SplitRoyalties"];
    int64                          ITOFixed           = 7 [json_name = "ITOFixed"];
    uint32                         ITOPercentage      = 8 [json_name = "ITOPercentage"];
}

// RoyaltySplitInfo holds the royalty split
message RoyaltySplitInfo {
    uint32 PercentTransferPercentage         = 1 [json_name = "PercentTransferPercentage"];
    uint32 PercentTransferFixed              = 2 [json_name = "PercentTransferFixed"];
    uint32 PercentMarketPercentage           = 3 [json_name = "PercentMarketPercentage"];
    uint32 PercentMarketFixed                = 4 [json_name = "PercentMarketFixed"];
    uint32 PercentITOPercentage              = 5 [json_name = "PercentITOPercentage"];
    uint32 PercentITOFixed                   = 6 [json_name = "PercentITOFixed"];
}

// RoyaltyInfo holds the royalty threshold
message RoyaltyInfo {
    int64  Amount     = 1  [json_name = "amount"];
    uint32 Percentage = 2  [json_name = "percentage"];
}

// KDAPoolInfo holds the KDA Fee pool info
message KDAPoolInfo {
    bool                Active           = 1  [json_name = "Active"];
    bytes               AdminAddress     = 2  [json_name = "AdminAddress"];
    int64               FRatioKDA        = 3  [json_name = "FRatioKDA"];
    int64               FRatioKLV        = 4  [json_name = "FRatioKLV"];
}

// AssetTriggerContract triggers assets functions
message AssetTriggerContract {
    enum EnumTriggerType {
        Mint                    = 0;
        Burn                    = 1;
        Wipe                    = 2;
        Pause                   = 3;
        Resume                  = 4;
        ChangeOwner             = 5;
        AddRole                 = 6;
        RemoveRole              = 7;
        UpdateMetadata          = 8;
        StopNFTMint             = 9;
        UpdateLogo              = 10;
        UpdateURIs              = 11;
        ChangeRoyaltiesReceiver = 12;
        UpdateStaking           = 13;
        UpdateRoyalties         = 14;
        UpdateKDAFeePool        = 15;
        StopRoyaltiesChange     = 16;
        StopNFTMetadataChange   = 17;
    }
    EnumTriggerType    TriggerType  = 1  [json_name = "TriggerType"];
	bytes              AssetID      = 2  [json_name = "AssetID"];
    bytes              ToAddress    = 3  [json_name = "ToAddress"];
	int64              Amount       = 4  [json_name = "Amount"];
	bytes              MIME         = 5  [json_name = "Mime"];
	string             Logo         = 6  [json_name = "Logo"];
	map<string,string> URIs         = 7  [json_name = "URIs"];
    RolesInfo          Role         = 8  [json_name = "Role"];
    StakingInfo        Staking      = 9  [json_name = "Staking"];
    RoyaltiesInfo      Royalties    = 10 [json_name = "Royalties"];
    KDAPoolInfo        KDAPool      = 11 [json_name = "KDAPool"];
}

// ValidatorConfig holds the data for a validator configuration
message ValidatorConfig {
    bytes                BLSPublicKey        = 1 [json_name = "BLSPublicKey"];
    bytes                RewardAddress       = 2 [json_name = "RewardAddress"];
    bool                 CanDelegate         = 3 [json_name = "CanDelegate"];
    uint32               Commission          = 4 [json_name = "Commission"];
    int64                MaxDelegationAmount = 5 [json_name = "MaxDelegationAmount"];
    string               Logo                = 6 [json_name = "Logo"];
    map<string, string>  URIs                = 7 [json_name = "URIs"];
    string               Name                = 8 [json_name = "Name"];
}

// CreateValidatorContract holds the data for create a validator
message CreateValidatorContract {
    bytes OwnerAddress         = 1 [json_name = "OwnerAddress"];
    ValidatorConfig Config     = 2 [json_name = "Config"];
}

// ValidatorConfigContract holds the data for a validator configuration transaction
message ValidatorConfigContract {
    ValidatorConfig Config = 1 [json_name = "Config"];
}

// FreezeContract holds the data for a freeze transaction
message FreezeContract {
    bytes AssetID      = 1 [json_name = "AssetID"];
    int64 Amount       = 2 [json_name = "Amount"];
}

// UnfreezeContract holds the data for a unfreeze transaction
message UnfreezeContract {
    bytes AssetID      = 1 [json_name = "AssetID"];
    bytes BucketID     = 2 [json_name = "BucketID"];
}

// DelegateContract holds the data for a delegate transaction
message DelegateContract {
    bytes ToAddress    = 1 [json_name = "ToAddress"];
    bytes BucketID     = 2 [json_name = "BucketID"];
}

// UndelegateContract holds the data for a undelegate transaction
message UndelegateContract {
    bytes BucketID     = 1 [json_name = "BucketID"];
}

// WithdrawContract holds the data for a withdraw transaction
message WithdrawContract {
    bytes AssetID      = 1 [json_name = "AssetID"];
    enum EnumWithdrawType {
        Staking     = 0;
        KDAPool     = 1;
    }
    EnumWithdrawType WithdrawType  = 2 [json_name = "WithdrawType"];
    int64 amount       = 3 [json_name = "Amount"];
    bytes CurrencyID   = 4 [json_name = "CurrencyID"];
}

// ClaimContract holds the data for a claim transaction
message ClaimContract {
    enum EnumClaimType {
        StakingClaim    = 0;
        AllowanceClaim  = 1;
        MarketClaim     = 2;
    }
    EnumClaimType ClaimType  = 1 [json_name = "ClaimType"];
    bytes         ID         = 2 [json_name = "ID"];
}

// UnjailContract holds the data for a unjail transaction
message UnjailContract {}

// SetAccountNameContract holds the data for a setAccountName transaction
message SetAccountNameContract {
    bytes Name     = 1 [json_name = "Name"];
}

// ProposalContract holds the data for a proposal transaction
message ProposalContract {
    map<int32, bytes> Parameters     = 1 [json_name = "Parameters"];
    bytes             Description    = 2 [json_name = "Description"];
    uint32            EpochsDuration = 3 [json_name = "EpochsDuration"];
}

// VoteContract holds the data for a vote transaction
message VoteContract {
    enum EnumVoteType {
        Yes = 0;
        No  = 1;
    }
    uint64       ProposalID = 1 [json_name = "ProposalID"];
    int64        Amount     = 2 [json_name = "Amount"];
    EnumVoteType Type       = 3 [json_name = "Type"];
}

// ConfigITOContract holds the data for a ConfigITO transaction
message ConfigITOContract {
    enum EnumITOStatus {
        DefaultITO = 0;
        ActiveITO  = 1;
        PausedITO  = 2;
    }
    bytes                      AssetID                 = 1  [json_name = "AssetID"];
    bytes                      ReceiverAddress         = 2  [json_name = "ReceiverAddress"];
    EnumITOStatus              Status                  = 3  [json_name = "Status"];
    int64                      MaxAmount               = 4  [json_name = "MaxAmount"];
    map<string, PackInfo>      PackInfo                = 5  [json_name = "PackInfo"];
    int64                      DefaultLimitPerAddress  = 6  [json_name = "DefaultLimitPerAddress"];
    EnumITOStatus              WhitelistStatus         = 7  [json_name = "WhitelistStatus"];
    map<string, WhitelistInfo> WhitelistInfo           = 8  [json_name = "WhitelistInfo"];
    int64                      WhitelistStartTime      = 9  [json_name = "WhitelistStartTime"];
    int64                      WhitelistEndTime        = 10 [json_name = "WhitelistEndTime"];
    int64                      StartTime               = 11 [json_name = "StartTime"];
    int64                      EndTime                 = 12 [json_name = "EndTime"];
}

message WhitelistInfo {
    int64 Limit = 1 [json_name = "Limit"];
}

// SetITOPrices holds the data for a ConfigITO transaction
message SetITOPricesContract {
    bytes                 AssetID  = 1 [json_name = "AssetID"];
    map<string, PackInfo> PackInfo = 2 [json_name = "PackInfo"];
}

// ITOTriggerContract triggers assets functions
message ITOTriggerContract {
    enum EnumITOTriggerType {
        SetITOPrices                    = 0;
        UpdateStatus                    = 1;
        UpdateReceiverAddress           = 2;
        UpdateMaxAmount                 = 3;
        UpdateDefaultLimitPerAddress    = 4;
        UpdateTimes                     = 5;
        UpdateWhitelistStatus           = 6;
        AddToWhitelist                  = 7;
        RemoveFromWhitelist             = 8;
        UpdateWhitelistTimes            = 9;
    }
    enum EnumITOStatus {
        DefaultITO = 0;
        ActiveITO  = 1;
        PausedITO  = 2;
    }
    EnumITOTriggerType         TriggerType             = 1  [json_name = "TriggerType"];
    bytes                      AssetID                 = 2  [json_name = "AssetID"];
    bytes                      ReceiverAddress         = 3  [json_name = "ReceiverAddress"];
    EnumITOStatus              Status                  = 4  [json_name = "Status"];
    int64                      MaxAmount               = 5  [json_name = "MaxAmount"];
    map<string, PackInfo>      PackInfo                = 6  [json_name = "PackInfo"];
    int64                      DefaultLimitPerAddress  = 7  [json_name = "DefaultLimitPerAddress"];
    EnumITOStatus              WhitelistStatus         = 8  [json_name = "WhitelistStatus"];
    map<string, WhitelistInfo> WhitelistInfo           = 9  [json_name = "WhitelistInfo"];
    int64                      WhitelistStartTime      = 10 [json_name = "WhitelistStartTime"];
    int64                      WhitelistEndTime        = 11 [json_name = "WhitelistEndTime"];
    int64                      StartTime               = 12 [json_name = "StartTime"];
    int64                      EndTime                 = 13 [json_name = "EndTime"];
}

// PackInfo holds the pack list structure for the ITO contract
message PackInfo {
    repeated PackItem Packs = 1 [json_name = "Packs"];
}

// PackItem hold the pack structure for the ITO contract
message PackItem {
    int64 Amount = 1 [json_name = "Amount"];
    int64 Price  = 2 [json_name = "Price"];
}

// BuyContract holds the data for a buy transaction
message BuyContract {
    enum EnumBuyType {
        ITOBuy    = 0;
        MarketBuy = 1;
    }
    EnumBuyType BuyType    = 1 [json_name = "BuyType"];
    bytes       ID         = 2 [json_name = "ID"];
    bytes       CurrencyID = 3 [json_name = "CurrencyID"];
    int64       Amount     = 4 [json_name = "Amount"];
}

// SellContract holds the data for a sell transaction
message SellContract {
    enum EnumMarketType {
        BuyItNowMarket = 0;
        AuctionMarket  = 1;
    }
    EnumMarketType  MarketType         = 1 [json_name = "MarketType"];
    bytes           MarketplaceID      = 2 [json_name = "MarketplaceID"];
    bytes           AssetID            = 3 [json_name = "AssetID"];
    bytes           CurrencyID         = 4 [json_name = "CurrencyID"];
    int64           Price              = 5 [json_name = "Price"];
    int64           ReservePrice       = 6 [json_name = "ReservePrice"];
    int64           EndTime            = 7 [json_name = "EndTime"];
}

// CancelMarketOrderContract holds the data for a cancel market transaction
message CancelMarketOrderContract {
    bytes OrderID = 1 [json_name = "OrderID"];
}

// CreateMarketplaceContract holds the data for a create marketplace transaction
message CreateMarketplaceContract {
    bytes  Name               = 1 [json_name = "Name"];
    bytes  ReferralAddress    = 2 [json_name = "ReferralAddress"];
    uint32 ReferralPercentage = 3 [json_name = "ReferralPercentage"];
}

// ConfigMarketplaceContract holds the data for a config marketplace transaction
message ConfigMarketplaceContract {
    bytes  MarketplaceID      = 1 [json_name = "MarketplaceID"];
    bytes  Name               = 2 [json_name = "Name"];
    bytes  ReferralAddress    = 3 [json_name = "ReferralAddress"];
    uint32 ReferralPercentage = 4 [json_name = "ReferralPercentage"];
}

// TODO: Reuse from account
message AccKey {
    bytes address = 1 [json_name = "Address"];
    int64 weight  = 2 [json_name = "Weight"];
}

message AccPermission {
    enum AccPermissionType {
        Owner = 0;
        User  = 1;
    }
    AccPermissionType  Type           = 2 [json_name = "Type"];
    string             PermissionName = 3 [json_name = "PermissionName"];
    int64              Threshold      = 4 [json_name = "Threshold"];
    bytes              Operations     = 5 [json_name = "Operations"]; //1 bit 1 contract
    repeated AccKey    Signers        = 6 [json_name = "Signers"];
}

// UpdateAccountPermissionContract holds the data for update account permission transaction
message UpdateAccountPermissionContract {
    repeated AccPermission Permissions = 8 [json_name = "Permissions"];
}

// DepositContract holds the data for a deposit transaction
message DepositContract {
    enum EnumDepositType {
        FPRDeposit  = 0;
        KDAPool     = 1;
    }
    EnumDepositType DepositType  = 1 [json_name = "DepositType"];
    bytes           ID           = 2 [json_name = "ID"];
    bytes           CurrencyID   = 3 [json_name = "CurrencyID"];
    int64           Amount       = 4 [json_name = "Amount"];
}

message SmartContract {
    enum SCType {
        SCInvoke  = 0;
        SCDeploy  = 1;
    }
    SCType  Type       = 1 [json_name = "Type"];
    bytes   Address    = 2 [json_name = "Address"];
    // SmartContract CallValue is represented by a map of currencyID and amount
    //  should be limited to 50 currencies
    map<string, int64> CallValue = 3 [json_name = "CallValue"];
}
